openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    **This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about**
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:4000
tags:
  - name: users
    description: Operations related to twitter users
paths:
  /users/login:
    post:
      tags:
        - users
      summary: Login
      description: Login into account
      operationId: login
      requestBody:
        description: Data for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'

        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login Success
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
        '422':
          description: Invalid input
  /users/me:
    get:
      tags:
        - users
      summary: Get My Profile Info
      description: Get My Profile Info
      operationId: getMe
      security:
        - BearerAuth: []
      responses:
        default:
          description: Get my profile success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      tags:
        - users
      summary: Update My Profile Info
      description: Update My Profile Info
      operationId: updateMe
      security:
        - BearerAuth: []
      requestBody:
        description: Update info of my profile
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMeBody'
        required: true
  /users/register:
    post:
      tags:
        - users
      summary: Register new account
      description: Register new account
      operationId: register
      requestBody:
        description: Info of new register
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
        required: true
      responses:
        '200':
          description: Register successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Register successfully
                  result:
                    $ref: '#/components/schemas/SuccessAuthentication'
